# Title bar/prompt
# A little hacky; title-prompt-config will get reloaded by the 
# general .zshrc.d reader, but we don't care about its output
# at that point.  The important thing is that title-prompt-config
# is machine-specific and won't get overwritten by the dotfiles install.
#
# TODO: encapsulate this better in functions once I learn shell functions!

blue=$'%{\e[34m%}' 		# %{ chars don't add to length of prompt %}
red=$'%{\e[31m%}'
black=$'%{\e[30m%}'
magenta=$'%{\e[35m%}'

setopt prompt_subst
setopt transient_rprompt

title_L=$'%{\e]2;'		# \e]2;title bar\a
title_R=$'\a%}'
title_text="%m:%~"		# %m = machine name, %~ = current directory
title_full="$title_L$title_text$title_R"

if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then
debian_chroot=$(cat /etc/debian_chroot)
fi

# title-prompt-config should be something like:
# prompt_L="$red%U"

source ~/.zshrc.d/title-prompt-config

prompt_R="$black%u"
prompt_text="%1~"			# %1~ = rightmost component of current directory

if [[ $EUID = 0 ]]; then
    prompt_L="$prompt_L%B"
    prompt_R="$prompt_R%b"
    prompt_state="$red%B%#%b$black"
else
    prompt_state="%#"
fi

prompt_full="${debian_chroot:+[$debian_chroot] }$prompt_L$prompt_text$prompt_R"
# TODO: I like the status idea, but annoying that it doesn't reset itself
# prompt_status='%(?..(%?%) )' 
export PS1=$'$title_full$prompt_status$prompt_full$(prompt_git_info)$prompt_state '
export PS4='+%N:%i:%_>'	# script debugging
